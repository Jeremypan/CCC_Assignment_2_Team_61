#Setting Up CouchDB Cluster

#docker run couchdb:3.0.0
- name: pull couchdb couchdb_image
  become: yes
  docker_image:
    name: '{{ couchdb_image }}'
    source: pull

################Docker Debug######################

# - name: Get infos on container
#   become: yes
#   docker_container_info:
#     name: couchdb3{{ ansible_default_ipv4.address }}
#   register: container_result

# - name: Does container exist?
#   debug:
#     msg: "The container {{ 'exists' if container_result.exists else 'does not exist' }}"

- name: create a directory couchdb if it does not exist
  become: yes
  file: 
    path: /opt/couchdb
    state: directory
    owner: ubuntu
    group: ubuntu

- name: create a data directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/data
    state: directory
    owner: ubuntu
    group: ubuntu

- name: create a etc directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/etc
    state: directory
    owner: ubuntu
    group: ubuntu

# - name: create configuration file vmargs
#   become: yes
#   file:
#     path: /opt/couchdb/etc/vm.args
#     state: touch
#     owner: ubuntu
#     group: ubuntu

# - name: copy docker config file to server | step 1
#   become: yes
#   template:
#     src: vm.args.j2
#     dest: '/opt/couchdb/etc/vm.args'
#     owner: ubuntu
#     group: ubuntu
#     force: no

# - name: copy docker config file to server | step 2
#   become: yes
#   template:
#     src: default.ini.j2
#     dest: '/opt/couchdb/etc/default.ini'
#     owner: ubuntu
#     group: ubuntu
#     force: no

# - name: copy docker config file to server | step 3
#   become: yes
#   template:
#     src: docker.ini.j2
#     dest: '/opt/couchdb/etc/docker.ini'
#     owner: ubuntu
#     group: ubuntu
#     force: no

#first_time_no_need to stop and remove step

# - name: Stop a container
#   become: yes
#   docker_container:
#      name: couchdb3_{{ inventory_hostname }}
#      state: stopped

# - name: remove a container
#   become: yes
#   docker_container:
#      name: couchdb3_{{ inventory_hostname }}
#      state: absent

- name: Create couchdb container
  become: yes
  docker_container:
    name: couchdb3_{{ ansible_default_ipv4.address }}
    image: '{{ couchdb_image }}'
    state: started
    detach: yes
    env:
      COUCHDB_USER: '{{ couchdb_user }}'
      COUCHDB_PASSWORD: '{{ couchdb_pass }}'
      COUCHDB_SECRET: '{{ couchdb_cookie }}'
      ERL_FLAGS: '-setcookie {{ couchdb_cookie }} -name couchdb@{{ ansible_default_ipv4.address }}'
    ports:
      - "5984:5984"
      - "9100-9200:9100-9200"
      - "4369:4369"
    # first time have to void if the opt/couchdb/etc is empty
    volumes:
      - /opt/couchdb/etc:/opt/couchdb/etc
    healthcheck:
      test: ['curl']
      interval: 10s
      retries: 3
      start_period: 30s
    comparisons:
      env: strict




# # give permission to docker.sock
# - name: fix docker.sock permission
#   become: yes
#   file:
#     path: /var/run/docker.sock
#     owner: ubuntu
#     group: ubuntu
#     recurse: yes
#     mode: 0775




# Append to apply cluster configurations to each node
- name: Appending Configurations in vm.args
  become: yes
  command: "{{ item }}"
  with_items:
    - chmod 775 /var/run/docker.sock
    - docker exec couchdb3_{{ ansible_default_ipv4.address }} bash -c "echo \"-setcookie {{ couchdb_cookie }} -name couchdb@{{ ansible_default_ipv4.address }}\" >> /opt/couchdb/etc/vm.args"
    - docker exec couchdb3_{{ ansible_default_ipv4.address }} bash -c "echo \"-name couchdb3_{{ ansible_default_ipv4.address }}\" >> /opt/couchdb/etc/vm.args"
    - docker exec couchdb3_{{ ansible_default_ipv4.address }} bash -c "echo \"-kernel inet_dist_listen_min 9100\" >> /opt/couchdb/etc/vm.args"
    - docker exec couchdb3_{{ ansible_default_ipv4.address }} bash -c "echo \"-kernel inet_dist_listen_max 9200\" >> /opt/couchdb/etc/vm.args"



- name: docker copy config to host 1st
  become: yes
  command: docker ps  -aqf "name=couchdb3_{{ inventory_hostname }}"
  register: container_results


- name: docker copy config to host 2nd
  become: yes
  command: "{{ item }}"
  with_items:
    docker cp {{ container_results.stdout }}:/opt/couchdb/etc /opt/couchdb/

- name: edit_permission
  become: yes
  command: chmod -R 775 /opt/couchdb/etc/


# - name: Restarting Container
#   become: yes
#   command: docker restart couchdb3_{{ ansible_default_ipv4.address }}
    
# - name: Pause Execution to Let Container Restart
#   become: yes
#   pause:
#     seconds: 5

# - name: Running Docker CouchDb Container
#   become: yes 
#   command: "{{ item }}"
#   with_items:
#     # Run commented code if volumes are available, and have been mounted
#     - docker run -d -p 5984:5984 -p 9100-9200:9100-9200 -p 5986:5986 -p 4369:4369 -e COUCHDB_USER={{couchdb_user}} -e COUCHDB_PASSWORD={{couchdb_pass}} --name couchdb3_{{ inventory_hostname }} {{couchdb_image}}
#     # - docker run -d -p 5984:5984 -p 9100-9200:9100-9200 -p 5986:5986 -p 4369:4369 -e COUCHDB_USER={{couchdb_user}} -e COUCHDB_PASSWORD={{couchdb_pass}} --name couchdb {{couchdb_image}}


# - name: Bind Clustered Interface to all IP Addresses 1st
#   uri:
#     url: http://localhost:5984/_node/_local/_config/chttpd/
#     method: PUT
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#     body_format: json
#     body: '{"bind_address":"0.0.0.0"}'

# - name: Bind Clustered Interface to all IP Addresses 2nd
#   uri:
#     url: http://localhost:5984/_node/_local/_config/httpd/
#     method: PUT
#     # user: '{{ couchdb_user }}'
#     # password: '{{ couchdb_pass }}'
#     body_format: json
#     body: '{"bind_address":"0.0.0.0"}'
    
- set_fact:
    ip_address_list: '{{ node_ips.split(",") }}'
    cacheable: yes

- set_fact:
    master_node: '{{ ip_address_list[0] }}'
    cacheable: yes

- name: check_facts_of_master_node
  debug:
    msg: '{{ master_node }}'

- name: test_condition
  debug:
    msg: 'worker_ node: {{ inventory_hostname }}'
  when: not ansible_default_ipv4.address  == master_node

- name: Cluster Setup Part 1
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" --header "Content-Type:application/json" --data "{\"action\":\"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\":\"{{couchdb_user}}\", \"password\":\"{{couchdb_pass}}\", \"port\":\"5984\", \"node_count\":\"3\", \"remote_node\":\"{{ inventory_hostname }}\", \"remote_current_user\":\"{{couchdb_user}}\", \"remote_current_password\":\"{{couchdb_pass}}\"}"
  when: not ansible_default_ipv4.address  == master_node

- name: Cluster Setup Part 2 
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" --header "Content-Type:application/json" --data "{\"action\":\"add_node\", \"host\":\"{{ inventory_hostname }}\", \"port\":\"5984\", \"username\":\"{{couchdb_user}}\", \"password\":\"{{couchdb_pass}}\"}"
  when: not ansible_default_ipv4.address  == master_node

# - name: enable the Cluster
#   become: yes
#   uri:
#     url: "http://{{ master_node }}:5984/_cluster_setup"
#     method: POST
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#     status_code: 201
#     headers:
#       Content-Type: "application/json"
#     body_format: json
#     body: '{ "action": "enable_cluster", "bind_address": "0.0.0.0", "username": {{ couchdb_user }}, "password": {{ couchdb_pass }}, "port": "5984", "remote_node": {{ ansible_default_ipv4.address }}, "node_count": {{ couchdb_node_number }}, "remote_current_user": {{ couchdb_user }}, "remote_current_password": {{ couchdb_pass }} }'
#   when: not ansible_default_ipv4.address  == master_node

# - name: add nodes to the cluster
#   become: yes
#   uri:
#     url: "http://{{ master_node }}:5984/_cluster_setup"
#     method: POST
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#     status_code: 201, 409
#     headers:
#       Content-Type: "application/json"
#     force_basic_auth: yes
#     body_format: json
#     body: '{"action":"add node", "username" : {{ couchdb_user }}, "password" : {{ couchdb_pass }}, "host": {{ inventory_hostname }}, "port": "5984" }'
#   when: not ansible_default_ipv4.address  == master_node

- name: finish cluster 1st step
  command: curl -X GET http://{{couchdb_user}}:{{couchdb_pass}}@{{ master_node }}:5984/

# - name: finish cluster 2nd step
#   become: yes
#   uri:
#     url: "http://{{ master_node }}:5984/_cluster_setup"
#     method: POST
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#     status_code: 201
#     headers:
#       Content-Type: "application/json"
#     body_format: json
#     body: '{"action": "finish_cluster"}'


# Let Master Node know that the nodes have been added
- name: Finish Cluster 2nd step
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" \--header "Content-Type:application/json" --data "{\"action\":\"finish_cluster\"}"



- name: Check whether the cluster configuration is correct
  command: curl -X GET "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_membership"
  register: results


- name: check_configuration_result 
  debug:
    msg: '{{ results.stdout }}'


# - name: Check whether the cluster configuration is correct
#   uri:
#     url: "http://{{ inventory_hostname }}:5984/_membership"
#     method: GET
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#   register: results

