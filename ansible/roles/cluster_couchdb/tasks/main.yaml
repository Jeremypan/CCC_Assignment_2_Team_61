#Setting Up CouchDB Cluster

#docker run couchdb:3.0.0
#- name: Unmount a mounted volume
#  become: yes
#  mount:
#    path: "{{ mount_point }}"
#    state: unmounted
#
#- name: Recursively remove directory
#  become: yes
#  file:
#    path: /opt/couchdb
#    state: absent
#    recurse: yes
- name: install essenstails for couchdb
  tags: always
  become: yes
  pip:
    name: ['requests']
    state: latest

- name: check vdb
  become: yes
  command: df -h
  register: output

- name: debug
  debug:
    msg: ”{{ output }}“


- name: create a directory couchdb if it does not exist
  become: yes
  file:
    path: /opt/couchdb
    state: directory
    owner: ubuntu
    group: ubuntu

- name: create file system
  become: yes
  filesystem:
    fstype: xfs
    dev: "{{ device }}"
  when:  device is defined

- name: directory
  become: yes
  stat:
    path: "{{ mount_point }}"
  register: directory_stats

- debug:
    msg: "| directory_stats ==> {{ directory_stats }}"


- name: Create directory
  become: yes
  file:
    path: "{{ mount_point }}"
    recurse: yes
    state: directory

- name: Mount device
  become: yes
  mount:
    path: "{{ mount_point }}"
    src: "{{ device }}"
    fstype: xfs
    state: mounted
  when: device is defined

- name: edit_permission
  become: yes
  command: chmod -R 775 /opt/couchdb/

- name: create a etc directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/etc
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0775'

- name: create a etc directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/etc/local.d
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0775'

- name: edit_permission
  become: yes
  file:
    path: /opt/couchdb/
    owner: ubuntu
    group: ubuntu
    mode: '0755'
    recurse: yes


- name: check vdb
  become: yes
  command: df -h
  register: output

- name: debug
  debug:
    msg: ”{{ output }}“

- name: check_running_couchdb
  become: yes
  shell: docker container ls | grep -w "couchdb2_{{ inventory_hostname }}" | awk '{print  $1}'
  register: Running

- name: pull couchdb couchdb_image
  become: yes
  docker_image:
    name: '{{ couchdb_image }}'
    source: pull

################Docker Debug######################

- name: copy files
  become: yes
  template:
    src: "../templates/vm.args"
    dest: '/opt/couchdb/etc/vm.args'
    owner: ubuntu
    group: ubuntu
    mode: u=rwx,g=rwx,o=rwx


- name: copy files
  become: yes
  template:
    src: "../templates/docker.ini"
    dest: '/opt/couchdb/etc/local.d/docker.ini'
    owner: ubuntu
    group: ubuntu
    mode: u=rwx,g=rwx,o=rwx

- name: copy files
  become: yes
  template:
    src: "../templates/default.ini"
    dest: '/opt/couchdb/etc/default.ini'
    owner: ubuntu
    group: ubuntu
    mode: u=rwx,g=rwx,o=rwx


#- name: Stop a container
#  become: yes
#  docker_container:
#    name: couchdb2_{{ inventory_hostname }}
#    state: stopped
#
#- name: remove a container
#  become: yes
#  docker_container:
#    name: couchdb2_{{ inventory_hostname }}
#    state: absent

- name: Get infos on container
  become: yes
  docker_container_info:
    name: couchdb2_{{ inventory_hostname }}
  register: container_result

- name: Does container exist?
  debug:
    msg: "The container {{ 'exists' if container_result.exists else 'does not exist' }}"


- name: Create couchdb container
  become: yes
  docker_container:
    state: started
    name: couchdb2_{{ inventory_hostname }}
    image: '{{ couchdb_image }}'
    detach: yes
    env:
      COUCHDB_USER: '{{ couchdb_user }}'
      COUCHDB_PASSWORD: '{{ couchdb_pass }}'
      COUCHDB_SECRET: '{{ couchdb_cookie }}'
      ERL_FLAGS: '-setcookie {{ couchdb_cookie }} -name couchdb@{{ inventory_hostname }}'
    ports:
      - "5984:5984"
      - "9100-9200:9100-9200"
      - "4369:4369"
    volumes:
      - /opt/couchdb/etc/vm.args:/opt/couchdb/vm.args:rw
      - /opt/couchdb/etc/local.d/docker.ini:/opt/couchdb/etc/local.d/docker.ini:rw
      - /opt/couchdb/etc/default.ini:/opt/couchdb/etc/default.ini:rw
      - /opt/couchdb/data:/opt/couchdb/data:rw

- name: Appending Configurations in vm.args
  become: yes
  command: "{{ item }}"
  with_items:
    - chmod 775 /var/run/docker.sock

- name: Pause Execution to Let Container Start in first time
  pause:
    seconds: 20

- set_fact:
    ip_address_list: '{{ node_ips.split(",") }}'
    cacheable: yes

- set_fact:
    master_node: '{{ ip_address_list[0] }}'
    cacheable: yes

- name: check_facts_of_master_node
  debug:
    msg: '{{ master_node }}'

- name: test_condition
  debug:
    msg: 'worker_ node: {{ inventory_hostname }}'
  when: not inventory_hostname  == master_node

- name: Cluster Setup Part 1
  become: yes
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" --header "Content-Type:application/json" --data "{\"action\":\"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\":\"{{couchdb_user}}\", \"password\":\"{{couchdb_pass}}\", \"port\":\"5984\", \"node_count\":\"3\", \"remote_node\":\"{{ inventory_hostname }}\", \"remote_current_user\":\"{{couchdb_user}}\", \"remote_current_password\":\"{{couchdb_pass}}\"}"
  when: not inventory_hostname   == master_node
  register: cluster_result

- name: cluster_debug
  debug:
    msg: "{{ cluster_result }}"


- name: Cluster Setup Part 2
  become: yes 
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" --header "Content-Type:application/json" --data "{\"action\":\"add_node\", \"host\":\"{{ inventory_hostname }}\", \"port\":\"5984\", \"username\":\"{{couchdb_user}}\", \"password\":\"{{couchdb_pass}}\"}"
  when: not inventory_hostname  == master_node
  register: cluster_result

- name: cluster_debug
  debug:
    msg: "{{ cluster_result }}"
  when: not inventory_hostname  == master_node



# Let Master Node know that the nodes have been added
- name: Finish Cluster
  command: curl -XPOST "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_cluster_setup" \--header "Content-Type:application/json" --data "{\"action\":\"finish_cluster\"}"



- name: Check whether the cluster configuration is correct
  command: curl -X GET "http://{{couchdb_user}}:{{couchdb_pass}}@{{master_node}}:5984/_membership"
  register: results

# Back up configuration
- name: check_configuration_result 
  debug:
    msg: '{{ results.stdout }}'

- name: docker copy config to host 1st
  become: yes
  command: docker ps  -aqf "name=couchdb2_{{ inventory_hostname }}"
  register: container_results

- name: turn on maintenance mode
  command: curl -X PUT "{{couchdb_user}}:{{couchdb_pass}}@{{ master_node }}:5984/_node/couchdb@{{ master_node }}/_config/couchdb/maintenance_mode" -d '"true"' --header "Content-Type:application/json"
  when: inventory_hostname == master_node
  register: std_output

- debug:
    msg: '{{ std_output }}'
  when: inventory_hostname == master_node

- name: copy python config file
  become: yes
  template:
    src: "../templates/map_shards_python.py"
    dest: '/home/ubuntu/map_shards_python.py'
    owner: ubuntu
    group: ubuntu
    mode: u=rwx,g=rwx,o=rwx
    force: yes
  register: std_output
  when: inventory_hostname==master_node

- name: run map_shards_python
  become: yes
  command: python3 map_shards_python.py
  register: std_o
  when: inventory_hostname == master_node

- debug:
    msg: "{{ std_o.stdout }}"
  when: inventory_hostname == master_node

- debug:
    msg: '{{ std_output }}'
  when: inventory_hostname == master_node

- name: turn off maintenance mode
  command: curl -X PUT "{{couchdb_user}}:{{couchdb_pass}}@{{ master_node }}:5984/_node/couchdb@{{ master_node }}/_config/couchdb/maintenance_mode" -d '"false"' -H "Content-Type:application/json"
  when: inventory_hostname  == master_node
  register: std_output

- debug:
    msg: '{{ std_output }}'

- name: check vdb
  become: yes
  command: df -h
  register: output

- name: debug
  debug:
    msg: ”{{ output }}“


