#Setting Up CouchDB Cluster

#docker run couchdb:3.0.0
- name: pull couchdb couchdb_image
  become: yes
  docker_image:
    name: '{{ couchdb_image }}'
    source: pull

################Docker Debug######################

# - name: Get infos on container
#   become: yes
#   docker_container_info:
#     name: couchdb3{{ ansible_default_ipv4.address }}
#   register: container_result

# - name: Does container exist?
#   debug:
#     msg: "The container {{ 'exists' if container_result.exists else 'does not exist' }}"

# - name: stop_data_container
#   become: yes
#   docker_container:
#     name: couchdb{{ item }}
#     state: stopped
#   when: container_result

# - name: remove_data_container
#   become: yes
#   docker_container:
#     name: couchdb{{ item }}
#     state: absent
#   when: container_result
- name: create a directory couchdb if it does not exist
  become: yes
  file: 
    path: /opt/couchdb
    state: directory
    owner: ubuntu
    group: ubuntu

- name: create a data directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/data
    state: directory
    owner: ubuntu
    group: ubuntu

- name: create a etc directory if it does not exist
  become: yes
  file:
    path: /opt/couchdb/etc
    state: directory
    owner: ubuntu
    group: ubuntu

# - name: create configuration file vmargs
#   become: yes
#   file:
#     path: /opt/couchdb/etc/vm.args
#     state: touch
#     owner: ubuntu
#     group: ubuntu

# - name: copy docker config file to server | step 1
#   become: yes
#   template:
#     src: vm.args.j2
#     dest: '/opt/couchdb/etc/vm.args'
#     owner: ubuntu
#     group: ubuntu
#     force: no

# - name: copy docker config file to server | step 2
#   become: yes
#   template:
#     src: default.ini.j2
#     dest: '/opt/couchdb/etc/default.ini'
#     owner: ubuntu
#     group: ubuntu
#     force: no

# - name: copy docker config file to server | step 3
#   become: yes
#   template:
#     src: docker.ini.j2
#     dest: '/opt/couchdb/etc/docker.ini'
#     owner: ubuntu
#     group: ubuntu
#     force: no

- name: Create couchdb container
  become: yes
  docker_container:
    name: couchdb3{{ ansible_default_ipv4.address }}
    image: '{{ couchdb_image }}'
    state: started
    env:
      COUCHDB_USER: '{{ couchdb_user }}'
      COUCHDB_PASSWORD: '{{ couchdb_pass }}'
      COUCHDB_SECRET: '{{ couchdb_cookie }}'
      ERL_FLAGS: '-setcookie {{ couchdb_cookie }} -name couchdb@{{ ansible_default_ipv4.address }}'
    ports:
      - "5984:5984"
      - "9100-9200:9100-9200"
      - "4369:4369"
    volumes:
      - /mnt/couchdb/data:/opt/couchdb/data


# - name: Bind Clustered Interface to all IP Addresses 1st
#   uri:
#     url: http://localhost:5984/_node/_local/_config/chttpd/
#     method: PUT
#     user: '{{ couchdb_user }}'
#     password: '{{ couchdb_pass }}'
#     body_format: json
#     body: '{"bind_address":"0.0.0.0"}'

# - name: Bind Clustered Interface to all IP Addresses 2nd
#   uri:
#     url: http://localhost:5984/_node/_local/_config/httpd/
#     method: PUT
#     # user: '{{ couchdb_user }}'
#     # password: '{{ couchdb_pass }}'
#     body_format: json
#     body: '{"bind_address":"0.0.0.0"}'
    
- set_fact:
    ip_address_list: '{{ node_ips.split(",") }}'
    cacheable: yes

- set_fact:
    master_node: '{{ ip_address_list[0] }}'
    cacheable: yes

- name: check_facts_of_master_node
  debug:
    msg: '{{ master_node }}'

- name: test_condition
  debug:
    msg: 'worker_ node: {{ inventory_hostname }}'
  when: not ansible_default_ipv4.address  == master_node

- name: enable the Cluster
  become: yes
  uri:
    url: "http://{{ master_node }}:5984/_cluster_setup"
    method: POST
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_pass }}'
    status_code: 201
    headers:
      Content-Type: "application/json"
    body_format: json
    body: '{ "action": "enable_cluster", "bind_address": "0.0.0.0", "username": {{ couchdb_user }}, "password": {{ couchdb_pass }}, "port": "5984", "remote_node": {{ ansible_default_ipv4.address }}, "node_count": {{ couchdb_node_number }}, "remote_current_user": {{ couchdb_user }}, "remote_current_password": {{ couchdb_pass }} }'
  when: not ansible_default_ipv4.address  == master_node

- name: add nodes to the cluster
  become: yes
  uri:
    url: "http://{{ master_node }}:5984/_cluster_setup"
    method: POST
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_pass }}'
    status_code: 201, 409
    headers:
      Content-Type: "application/json"
    force_basic_auth: yes
    body_format: json
    body: '{"action":"add node", "username" : {{ couchdb_user }}, "password" : {{ couchdb_pass }}, "host": {{ inventory_hostname }}, "port": "5984" }'
  when: not ansible_default_ipv4.address  == master_node

- name: finish cluster 1st step
  become: yes
  uri:
    url: "http://{{ master_node }}:5984/"
    method: GET
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_pass }}'

- name: finish cluster 2nd step
  become: yes
  uri:
    url: "http://{{ master_node }}:5984/_cluster_setup"
    method: POST
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_pass }}'
    status_code: 201
    headers:
      Content-Type: "application/json"
    body_format: json
    body: '{"action": "finish_cluster"}'

- name: Check whether the cluster configuration is correct
  uri:
    url: "http://{{ inventory_hostname }}:5984/_membership"
    method: GET
    user: '{{ couchdb_user }}'
    password: '{{ couchdb_pass }}'
  register: results

- name: check_configuration_result 
  debug:
    msg: '{{ results }}'

     



    



# - name: Config Cluster
#   become: yes
#   template: 
#     src: host_ip.j2
#     owner: ubuntu
#     group: ubuntu
#     dest: '/home/ubuntu/ip.conf'









  
# - name: Pause for 30s to wait for container restart
#   pause:
#     seconds: 20

# - debug:
#     msg: '{{ item }}'
#   loop: '{{ CCC_Assignment_2 }}'
